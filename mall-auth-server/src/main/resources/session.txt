服务器为了保存浏览器此次跟它交互的整个会话期间的数据，服务器创建了session
session共享问题
session原理
浏览器访问服务器

session不能跨不同域名共享
由于负载均衡机制，一个人两次访问同一个服务可能访问到了两台服务器
同一个微服务，如果复制了多份，达到了真正的分布式情况，那么即使对同一个域名的服务进行访问
也会导致session不同步的问题，因为session是保存在一个服务器的内存里面，相当于一个map
那么同一个域名的服务器可能有多台（复制了多份）session依然不能共享

session共享问题解决  同域名session共享问题
方案一--session复制
优点：web-server(tomcat)原生支持，只需要修改配置文件
缺点：
1.session同步需要数据传输，占用大量网络带宽，降低了服务器集群的业务处理能力
2.当服务器集群特别大时候，每一台服务器都要保存其他服务器所有的session
受到严重的内存限制无法水平扩展更多的web-server
在大型分布式集群环境下，由于所有的web-server 都全量保存数据，此方案不可取

方案二--客户端存储
session存储在客户端（浏览器）的cookie中
优点：服务器不需要在存储session,用户保存自己的session信息到cookie中，节省服务器资源
缺点：
1.每次http请求，携带用户在cookie中的完整信息，浪费网络资源
2.session数据保存在cookie中，cookie有长度限制，无法保存大量数据
3.session数据保存在cookie中，存在数据泄露，篡改，窃取的风险
这种方式不会使用

方案三--一致性哈希
每次都把用户的ip地址固定哈希到同一个服务器中，自然不存在分布式同一个服务的服务器之间session共享的问题
优点：
1.只需要修改nginx的配置，不需要修改应用代码
2.负载均衡，只要hash属性的值分布是均匀的，多台web服务器的负载就是均匀的
3.可以支持水平扩展
缺点：
1.session还是存在web-server中，web-server重启session会丢失
2.如果web-server水平扩展，rehash后session会重新分布
导致部分用户路由不到正确的session
但是这种方案的缺点不足为惧，可以使用

方案四--使用中间件(Redis)统一存储session
优点：
1.没有安全隐患
2.可以水平扩展，数据库、缓存水平切分即可
3.web-server重启不会有session丢失
缺点：
1.增加了一次网络调用，并且需要修改应用代码，如将所有的getSession替换为从redis查数据的方式
但是springSession可以解决所有问题

session共享问题解决  子域session共享问题

spring session 核心原理
1.@EnableRedisHttpSession注解导入了RedisHttpSessionConfiguration配置
给容器中添加了一个组件
SessionRepository>>>RedisOperationsSessionRepository：redis操作session的增删改查
创建的时候，就自动从容易中获取到了SessionRepository
原始的request response都被包装。SessionRepositoryRequestWrapper||||SessionRepositoryResponseWrapper
以后获取session，request.getSession();
wrappedRequest..getSession();>>>>从SessionRepository中获得
装饰者设计模式
2.SessionRepositoryFilter： session存储过滤器


                                                    核心！！！
doFilterInternal

	@Override
	protected void doFilterInternal(HttpServletRequest request,
			HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		request.setAttribute(SESSION_REPOSITORY_ATTR, this.sessionRepository);
        // 包装原始请求对象
   		SessionRepositoryRequestWrapper wrappedRequest = new SessionRepositoryRequestWrapper(
				request, response, this.servletContext);
		//包装原始响应对象
		SessionRepositoryResponseWrapper wrappedResponse = new SessionRepositoryResponseWrapper(
				wrappedRequest, response);
        //包装后的对象应用到了整个执行链
		try {
			filterChain.doFilter(wrappedRequest, wrappedResponse);
		}
		finally {
			wrappedRequest.commitSession();
		}
	}
装饰者模式

